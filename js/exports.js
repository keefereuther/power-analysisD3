/**
 * Export Functions
 * Handles downloading reports, plots, and data
 */

const Exports = {
    /**
     * Download power analysis report as text file
     */
    downloadReport(params, power, testType) {
        const testName = {
            'two_sample': 'Two-Sample t-Test',
            'paired': 'Paired t-Test',
            'anova': 'One-Way ANOVA',
            'regression': 'Linear Regression'
        }[testType] || 'Unknown Test';

        let report = [
            'POWER ANALYSIS REPORT',
            '===========================================',
            '',
            `Power Analysis for a ${testName}`,
            '',
            `Computed Power = ${power.toFixed(4)}`,
            '',
            'Parameters:',
            `  Sample Size per group (n): ${params.n}`,
            `  Significance level (α): ${params.alpha.toFixed(3)}`
        ];

        // Add test-specific parameters
        if (testType === 'two_sample' || testType === 'paired') {
            report.push(`  Effect Size (Cohen's d): ${params.effectSize.toFixed(4)}`);
            report.push(`  Test type: ${params.oneTailed ? 'One-tailed' : 'Two-tailed'}`);
        } else if (testType === 'anova') {
            report.push(`  Number of groups (k): ${params.k}`);
            report.push(`  Effect Size (Cohen's f): ${params.effectSize.toFixed(4)}`);
        } else if (testType === 'regression') {
            const f2 = params.r2 / (1 - params.r2);
            report.push(`  Number of predictors: ${params.predictors}`);
            report.push(`  R²: ${params.r2.toFixed(4)}`);
            report.push(`  Effect size (f²): ${f2.toFixed(4)}`);
        }

        // Add interpretation
        report.push('');
        report.push('Interpretation:');
        if (power < 0.8) {
            report.push(`  The current power (${(power * 100).toFixed(1)}%) is below the commonly recommended 80% threshold.`);
            report.push('  Consider increasing sample size or expecting a larger effect size.');
        } else {
            report.push(`  The current power (${(power * 100).toFixed(1)}%) meets or exceeds the commonly recommended 80% threshold.`);
        }

        report.push('');
        report.push(`Report generated: ${new Date().toLocaleString()}`);
        report.push('Generated by Statistical Power Analysis Tool');

        // Create and download file
        const blob = new Blob([report.join('\n')], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `power-analysis-report-${new Date().toISOString().split('T')[0]}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    },

    /**
     * Download power curve plot as SVG/PNG
     */
    downloadPlot(containerId) {
        const container = d3.select(`#${containerId}`);
        const svg = container.select('svg');
        
        if (svg.empty()) {
            alert('No plot available to download');
            return;
        }

        // Get SVG element
        const svgElement = svg.node();
        const svgData = new XMLSerializer().serializeToString(svgElement);
        const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });
        const svgUrl = URL.createObjectURL(svgBlob);

        // Create canvas to convert SVG to PNG
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const img = new Image();

        img.onload = function() {
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(img, 0, 0);

            canvas.toBlob(function(blob) {
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `power-analysis-plot-${new Date().toISOString().split('T')[0]}.png`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                URL.revokeObjectURL(svgUrl);
            });
        };

        img.src = svgUrl;
    },

    /**
     * Download sample data as CSV
     */
    downloadData(data, testType, params, power) {
        let csvContent = '';

        // Add metadata
        const metadata = [
            ['Test Type', {
                'two_sample': 'Two-Sample t-Test',
                'paired': 'Paired t-Test',
                'anova': 'One-Way ANOVA',
                'regression': 'Linear Regression'
            }[testType]],
            ['Sample Size', params.n.toString()],
            ['Alpha', params.alpha.toString()],
            ['Power', power.toFixed(4)]
        ];

        // Add test-specific metadata
        if (testType === 'two_sample' || testType === 'paired') {
            metadata.push(['Effect Size (Cohen\'s d)', params.effectSize.toString()]);
        } else if (testType === 'anova') {
            metadata.push(['Number of Groups', params.k.toString()]);
            metadata.push(['Effect Size (Cohen\'s f)', params.effectSize.toString()]);
        } else if (testType === 'regression') {
            metadata.push(['Number of Predictors', params.predictors.toString()]);
            metadata.push(['R²', params.r2.toString()]);
            const f2 = params.r2 / (1 - params.r2);
            metadata.push(['Effect size (f²)', f2.toFixed(4)]);
        }

        // Write metadata
        csvContent += 'variable,value\n';
        metadata.forEach(([key, value]) => {
            csvContent += `"${key}","${value}"\n`;
        });

        csvContent += '\n';
        csvContent += 'NOTE,"DATA SECTION BELOW"\n';
        csvContent += `NOTE,"Generated on ${new Date().toISOString().split('T')[0]}"\n`;
        csvContent += '\n';

        // Write data
        if (testType === 'two_sample' || testType === 'anova') {
            csvContent += 'value,group\n';
            for (let i = 0; i < data.values.length; i++) {
                csvContent += `${data.values[i]},${data.groups[i]}\n`;
            }
        } else if (testType === 'paired') {
            csvContent += 'id,value,time\n';
            for (let i = 0; i < data.values.length; i++) {
                csvContent += `${data.ids[i]},${data.values[i]},${data.times[i]}\n`;
            }
        } else if (testType === 'regression') {
            // Get all column names
            const columns = ['y', ...Object.keys(data).filter(k => k.startsWith('x'))];
            csvContent += columns.join(',') + '\n';
            
            // Write rows
            const n = data.y.length;
            for (let i = 0; i < n; i++) {
                const row = columns.map(col => data[col][i]);
                csvContent += row.join(',') + '\n';
            }
        }

        // Create and download file
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `power-analysis-sample-data-${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
};

